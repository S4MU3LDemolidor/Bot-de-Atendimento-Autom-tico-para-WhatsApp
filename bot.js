const { Client } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');

const client = new Client();
const userChoices = {}; // Para armazenar as escolhas dos usu√°rios e estados

client.on('ready', () => {
    console.log('Client is ready!');
});

client.on('qr', qr => {
    qrcode.generate(qr, { small: true });
});

function responderCliente(message, numero) {
    if (!userChoices[message.from]) {
        userChoices[message.from] = {};
    }

    switch (numero) {
        case '1':
            client.sendMessage(message.from, `üìã Para abrir um credi√°rio, vamos precisar que voc√™ traga os seguintes documentos:\n\nü™™ *RG* (Registro Geral)\nüìù *CPF* (Cadastro de Pessoa F√≠sica)\nüè† *Comprovante de endere√ßo*\nüíº *Comprovante de renda*\nüë• *Refer√™ncia comercial*\n\nAssim que tiver tudo pronto, venha √† nossa Loja presencialmente para darmos in√≠cio no processo! Ser√° um prazer t√™-lo como cliente üòâ`);
            break;
        case '2':
            client.sendMessage(message.from, `üéâ Temos sempre um *desconto fixo de 20%* em nossa loja! Para obter informa√ß√µes detalhadas sobre promo√ß√µes ou descontos especiais do dia, siga-nos no Instagram e fique por dentro de todas as novidades: https://www.instagram.com/ üì≤`);
            break;
        case '3':
            client.sendMessage(message.from, `‚åõ Nosso hor√°rio de funcionamento de segunda a sexta √© das 8h √†s 19h, e aos s√°bados, das 8h √†s 15h. Esperamos por voc√™!`);
            break;
        case '4':
            client.sendMessage(message.from, `üí∏ Para efetuar o pagamento de uma parcela, √© necess√°rio comparecer √† loja ou entrar em contato com o setor financeiro atrav√©s do nosso telefone. Estamos aqui para ajudar voc√™ a todo momento! üòâ`);
            break;
        case '5':
            client.sendMessage(message.from, `üõçÔ∏è Para verificar a disponibilidade do produto, informe o item que voc√™ est√° procurando. Assim que voc√™ informar, uma de nossas vendedoras estar√° dispon√≠vel para atend√™-lo rapidamente! üòä`);
            setTimeout(() => {
                client.sendMessage(message.from, `üìû Logo uma vendedora ir√° atend√™-lo!`);
            }, 1000);
            userChoices[message.from].transferred = true; // Marca o usu√°rio como transferido
            break;
        case '6':
            client.sendMessage(message.from, `üìû Aqui est√£o os contatos de nossos vendedores:\n\nüë©‚Äçüíº *Maria*: 12345-6789\nüë®‚Äçüíº *Jo√£o*: 98765-4321\nüë©‚Äçüíº *Ana*: 45678-1234\n\nSinta-se √† vontade para entrar em contato com qualquer um deles!`);
            break;
        case '7':
            client.sendMessage(message.from, `üëã Voc√™ ser√° transferido para um atendente agora! Por favor, aguarde um momento.`);
            userChoices[message.from].transferred = true; // Marca o usu√°rio como transferido
            break;
        default:
            client.sendMessage(message.from, `Desculpe, n√£o entendi sua escolha üòï. Por favor, selecione uma das op√ß√µes enviando o n√∫mero correspondente.`);
            break;
    }
}

client.on('message', async (message) => {
    const contact = await message.getContact();
    const name = contact.pushname || contact.verifiedName || contact.name || "Cliente";

    // Verificar se o usu√°rio foi transferido para um atendente
    if (userChoices[message.from] && userChoices[message.from].transferred) {
        return; // N√£o responde se o usu√°rio foi transferido
    }

    // Comando para encerrar a sess√£o
    if (message.body.trim().toLowerCase() === 'sair' || message.body.trim().toLowerCase() === 'encerrar') {
        if (!userChoices[message.from]) {
            userChoices[message.from] = {};
        }
        userChoices[message.from].transferred = true; // Marca o usu√°rio como transferido
        await client.sendMessage(message.from, `üëã A sess√£o foi encerrada! Se precisar de mais ajuda, n√£o hesite em nos chamar! üòä`);
        return;
    }

    // Mensagem de boas-vindas (apenas na primeira intera√ß√£o)
    if (!userChoices[message.from]) {
        userChoices[message.from] = {}; // Inicializa o estado do usu√°rio
        await client.sendMessage(message.from, `*üëã Oi ${name}, tudo bem?* Seja bem-vindo(a) √† Lojas Bonitas! üòÑ Como posso te ajudar hoje?\n\n1Ô∏è‚É£ - Quer saber como abrir um credi√°rio?\n2Ô∏è‚É£ - Qual o desconto especial do dia?\n3Ô∏è‚É£ - Que horas fechamos a loja?\n4Ô∏è‚É£ - Como pagar uma parcela atrasada?\n5Ô∏è‚É£ - Verificar se h√° um produto na loja?\n6Ô∏è‚É£ - Contatos dos vendedores\n7Ô∏è‚É£ - Conversar com um atendente\n\n√â s√≥ me dizer o n√∫mero da op√ß√£o que voc√™ quer!`);
        userChoices[message.from].welcomed = true; // Marca que o usu√°rio j√° recebeu a mensagem de boas-vindas
    } else {
        const numeroEscolhido = message.body.trim();

        // Chama a fun√ß√£o para responder ao cliente com base no n√∫mero escolhido
        responderCliente(message, numeroEscolhido);

        // Reinicia o fluxo de op√ß√µes ap√≥s a resposta com um delay de 5 segundos
        setTimeout(async () => {
            if (!userChoices[message.from]?.transferred) { // S√≥ pergunta novamente se o usu√°rio n√£o foi transferido
                await client.sendMessage(message.from, `*${name}*, deseja algo a mais? Digite o n√∫mero correspondente ou se quiser encerrar o atendimento autom√°tico, digite "sair".`);
            }
        }, 5000);
    }
});

client.initialize();
